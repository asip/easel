services:
  postgres-db:
    container_name: easel_postgres
    image: postgres:latest
    environment:
      TZ: ${TIME_ZONE_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ./tmp/db:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 2s
      timeout: 5s
      retries: 30

  minio:
    image: minio/minio:latest
    container_name: minio
    volumes:
      - ./minio/data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=${S3_ACCESS_KEY}
      - MINIO_ROOT_PASSWORD=${S3_SECRET_KEY}
    entrypoint: sh
    command: -c "/usr/bin/minio server /data --address :9000 --console-address :9001"

  imgproxy:
    image: darthsim/imgproxy:latest
    ports:
      - "8080:8080"
    extra_hosts:
      - "localhost:host-gateway"
    environment:
      IMGPROXY_USE_S3: true
      IMGPROXY_S3_ENDPOINT: http://localhost:9000
      AWS_ACCESS_KEY_ID: ${S3_ACCESS_KEY}
      AWS_SECRET_ACCESS_KEY: ${S3_SECRET_KEY}
      IMGPROXY_KEY: ${IMGPROXY_KEY}
      IMGPROXY_SALT: ${IMGPROXY_SALT}
    depends_on:
      minio:
        condition: service_started

  valkey:
    container_name: easel_valkey
    image: valkey/valkey:latest
    ports:
    - "6379:6379"
    volumes:
    - ./valkey/data:/data

  backend:
    container_name: easel_api
    build:
      context: ./backend
      args:
        UID: ${UID:-1000}
        GID: ${GID:-${UID:-1000}}
        time_zone: ${TIME_ZONE}
        time_zone_db: ${TIME_ZONE_DB}
        s3_access_key: ${S3_ACCESS_KEY}
        s3_secret_key: ${S3_SECRET_KEY}
        s3_endpoint: http://localhost:9000
        s3_bucket: uploads
        aws_region: ${AWS_REGION}
        redis_session_url: redis://valkey:6379/0/session
        imgproxy_endpoint: http://localhost:8080
        imgproxy_use_s3_urls: false
        imgproxy_shrine_host: http://localhost:3000
        imgproxy_key: ${IMGPROXY_KEY}
        imgproxy_salt: ${IMGPROXY_SALT}
    ports:
      - "3000:3000"
    extra_hosts:
      - "localhost:host-gateway"
    tty: true
    stdin_open: true
    environment:
      - TZ=${TIME_ZONE}
      - TIME_ZONE=${TIME_ZONE}
      - TIME_ZONE_DB=${TIME_ZONE_DB}
      - DATABASE_HOST=postgres-db
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres-db/
      - DATABASE_USER_NAME=${POSTGRES_USER}
      - DATABASE_PASSWORD=${POSTGRES_PASSWORD}
      - FRONTEND_ORIGIN_URL=http://localhost:3030
      - BACKEND_ORIGIN_URL=http://localhost:3000
      - REVERSE_PROXY_ORIGIN_URL=http://localhost
      - S3_ACCESS_KEY=${S3_ACCESS_KEY}
      - S3_SECRET_KEY=${S3_SECRET_KEY}
      - S3_ENDPOINT=http://localhost:9000
      - S3_BUCKET=uploads
      - S3_FORCE_PATH_STYLE=true
      - AWS_REGION=${AWS_REGION}
      - REDIS_SESSION_URL=redis://valkey:6379/0/session
      - IMGPROXY_ENDPOINT=http://localhost:8080
      - IMGPROXY_USE_S3_URLS=false
      - IMGPROXY_SHRINE_HOST=http://localhost:3000
      - IMGPROXY_KEY=${IMGPROXY_KEY}
      - IMGPROXY_SALT=${IMGPROXY_SALT}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
    depends_on:
      postgres-db:
        condition: service_healthy
      imgproxy:
        condition: service_started
      valkey:
        condition: service_started

  frontend:
    container_name: easel_web
    build:
      context: ./frontend
      args:
        time_zone: ${TIME_ZONE}
    volumes:
      - node_modules:/frontend/node_modules
    ports:
      - "3030:3030"
    tty: true
    stdin_open: true
    environment:
      - TZ=${TIME_ZONE}
      - HOST=0.0.0.0
      - port=3030
      - CHOKIDAR_USEPOLLING=true
      - NUXT_PUBLIC_TIME_ZONE=${TIME_ZONE}
      - NUXT_PUBLIC_BACKEND_ORIGIN_URL=http://localhost:3000
      - NUXT_BACKEND_ORIGIN_URL=http://easel_api:3000
      - NUXT_PUBLIC_GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
    depends_on:
      - backend

  nginx:
    image: nginx:latest
    container_name: easel_nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - backend
      - frontend

volumes:
  node_modules:

networks:
  default:
    name: easel_network
